From e3d4ae5a0a52105c0dc2b1f368f8aaf6df283044 Mon Sep 17 00:00:00 2001
From: adorbs <adorbsmusic@gmail.com>
Date: Sun, 28 Apr 2019 18:28:27 -0700
Subject: [PATCH] add r61505w and hx8347h drivers

---
 arch/arm/boot/dts/overlays/Makefile           |   2 +
 .../arm/boot/dts/overlays/hx8347h-overlay.dts |  60 +++++
 .../arm/boot/dts/overlays/r61505w-overlay.dts |  62 +++++
 drivers/staging/fbtft/Kconfig                 |  12 +
 drivers/staging/fbtft/Makefile                |   2 +
 drivers/staging/fbtft/fb_hx8347h.c            | 233 +++++++++++++++++
 drivers/staging/fbtft/fb_r61505w.c            | 245 ++++++++++++++++++
 drivers/staging/fbtft/fbtft_device.c          |  54 ++++
 8 files changed, 670 insertions(+)
 create mode 100644 arch/arm/boot/dts/overlays/hx8347h-overlay.dts
 create mode 100644 arch/arm/boot/dts/overlays/r61505w-overlay.dts
 create mode 100644 drivers/staging/fbtft/fb_hx8347h.c
 create mode 100644 drivers/staging/fbtft/fb_r61505w.c

diff --git a/arch/arm/boot/dts/overlays/Makefile b/arch/arm/boot/dts/overlays/Makefile
index 5b8ea9ec61e5..673590666527 100644
--- a/arch/arm/boot/dts/overlays/Makefile
+++ b/arch/arm/boot/dts/overlays/Makefile
@@ -56,6 +56,7 @@ dtbo-$(CONFIG_ARCH_BCM2835) += \
 	hifiberry-dacplusadcpro.dtbo \
 	hifiberry-digi.dtbo \
 	hifiberry-digi-pro.dtbo \
+	hx8347h.dtbo \
 	hy28a.dtbo \
 	hy28b.dtbo \
 	hy28b-2017.dtbo \
@@ -136,6 +137,7 @@ dtbo-$(CONFIG_ARCH_BCM2835) += \
 	rpi-sense.dtbo \
 	rpi-tv.dtbo \
 	rra-digidac1-wm8741-audio.dtbo \
+	r61505w.dtbo \
 	sc16is750-i2c.dtbo \
 	sc16is752-i2c.dtbo \
 	sc16is752-spi1.dtbo \
diff --git a/arch/arm/boot/dts/overlays/hx8347h-overlay.dts b/arch/arm/boot/dts/overlays/hx8347h-overlay.dts
new file mode 100644
index 000000000000..b9272560b2f2
--- /dev/null
+++ b/arch/arm/boot/dts/overlays/hx8347h-overlay.dts
@@ -0,0 +1,60 @@
+/*
+ * Device Tree overlay for hx8347h
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	compatible = "brcm,bcm2835", "brcm,bcm2708", "brcm,bcm2709";
+
+	fragment@0 {
+		target = <&spi0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+
+	fragment@1 {
+		target = <&spidev0>;
+		__overlay__ {
+			status = "disabled";
+		};
+	};
+
+	fragment@2 {
+		target = <&spidev1>;
+		__overlay__ {
+			status = "disabled";
+		};
+	};
+
+	fragment@3 {
+		target = <&spi0>;
+		__overlay__ {
+			/* needed to avoid dtc warning */
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			hx8347h: hx8347h@0{
+				compatible = "himax,hx8347h";
+				reg = <0>;
+				spi-max-frequency = <50000000>;
+				rotate = <0>;
+				bgr;
+				fps = <25>;
+				buswidth = <8>;
+				startbyte = <0x70>;
+				debug = <0>;
+			};
+		};
+	};
+
+	__overrides__ {
+		speed =		<&hx8347h>,"spi-max-frequency:0";
+		rotate =	<&hx8347h>,"rotate:0";
+		fps =		<&hx8347h>,"fps:0";
+		debug =		<&hx8347h>,"debug:0";
+	};
+};
diff --git a/arch/arm/boot/dts/overlays/r61505w-overlay.dts b/arch/arm/boot/dts/overlays/r61505w-overlay.dts
new file mode 100644
index 000000000000..88e9286f49fe
--- /dev/null
+++ b/arch/arm/boot/dts/overlays/r61505w-overlay.dts
@@ -0,0 +1,62 @@
+/*
+ * Device Tree overlay for r61505w
+ *
+ */
+
+/dts-v1/;
+/plugin/;
+
+/ {
+	compatible = "brcm,bcm2835", "brcm,bcm2708", "brcm,bcm2709";
+
+	fragment@0 {
+		target = <&spi0>;
+		__overlay__ {
+			status = "okay";
+		};
+	};
+
+	fragment@1 {
+		target = <&spidev0>;
+		__overlay__ {
+			status = "disabled";
+		};
+	};
+
+	fragment@2 {
+		target = <&spidev1>;
+		__overlay__ {
+			status = "disabled";
+		};
+	};
+
+	fragment@3 {
+		target = <&spi0>;
+		__overlay__ {
+			/* needed to avoid dtc warning */
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			r61505w: r61505w@0{
+				compatible = "renesas,r61505w";
+				reg = <0>;
+				spi-max-frequency = <32000000>;
+				spi-cpol;
+				spi-cpha;
+				rotate = <0>;
+				bgr;
+				fps = <25>;
+				buswidth = <8>;
+				startbyte = <0x70>;
+				debug = <0>;
+			};
+		};
+	};
+
+	__overrides__ {
+		speed =		<&r61505w>,"spi-max-frequency:0";
+		rotate =	<&r61505w>,"rotate:0";
+		fps =		<&r61505w>,"fps:0";
+		debug =		<&r61505w>,"debug:0";
+	};
+};
diff --git a/drivers/staging/fbtft/Kconfig b/drivers/staging/fbtft/Kconfig
index 84b2e7ebc024..88e9e1f48a45 100644
--- a/drivers/staging/fbtft/Kconfig
+++ b/drivers/staging/fbtft/Kconfig
@@ -33,6 +33,12 @@ config FB_TFT_HX8347D
 	help
 	  Generic Framebuffer support for HX8347D
 
+config FB_TFT_HX8347H
+	tristate "FB driver for the HX8347H LCD Controller"
+	depends on FB_TFT
+	help
+	  Generic Framebuffer support for HX8347H
+
 config FB_TFT_HX8353D
 	tristate "FB driver for the HX8353D LCD Controller"
 	depends on FB_TFT
@@ -99,6 +105,12 @@ config FB_TFT_RA8875
 	help
 	  Generic Framebuffer support for RA8875
 
+config FB_TFT_R61505W
+        tristate "FB driver for the R61505W LCD Controller"
+        depends on FB_TFT
+	help
+	  Generic Framebuffer support for R61505W
+
 config FB_TFT_S6D02A1
 	tristate "FB driver for the S6D02A1 LCD Controller"
 	depends on FB_TFT
diff --git a/drivers/staging/fbtft/Makefile b/drivers/staging/fbtft/Makefile
index 6bc03311c9c7..7789d0dc73b4 100644
--- a/drivers/staging/fbtft/Makefile
+++ b/drivers/staging/fbtft/Makefile
@@ -8,6 +8,7 @@ obj-$(CONFIG_FB_TFT_AGM1264K_FL) += fb_agm1264k-fl.o
 obj-$(CONFIG_FB_TFT_BD663474)    += fb_bd663474.o
 obj-$(CONFIG_FB_TFT_HX8340BN)    += fb_hx8340bn.o
 obj-$(CONFIG_FB_TFT_HX8347D)     += fb_hx8347d.o
+obj-$(CONFIG_FB_TFT_HX8347H)     += fb_hx8347h.o
 obj-$(CONFIG_FB_TFT_HX8353D)     += fb_hx8353d.o
 obj-$(CONFIG_FB_TFT_HX8357D)     += fb_hx8357d.o
 obj-$(CONFIG_FB_TFT_ILI9163)     += fb_ili9163.o
@@ -19,6 +20,7 @@ obj-$(CONFIG_FB_TFT_ILI9481)     += fb_ili9481.o
 obj-$(CONFIG_FB_TFT_ILI9486)     += fb_ili9486.o
 obj-$(CONFIG_FB_TFT_PCD8544)     += fb_pcd8544.o
 obj-$(CONFIG_FB_TFT_RA8875)      += fb_ra8875.o
+obj-$(CONFIG_FB_TFT_R61505W)     += fb_r61505w.o
 obj-$(CONFIG_FB_TFT_S6D02A1)     += fb_s6d02a1.o
 obj-$(CONFIG_FB_TFT_S6D1121)     += fb_s6d1121.o
 obj-$(CONFIG_FB_TFT_SH1106)      += fb_sh1106.o
diff --git a/drivers/staging/fbtft/fb_hx8347h.c b/drivers/staging/fbtft/fb_hx8347h.c
new file mode 100644
index 000000000000..75627341c07d
--- /dev/null
+++ b/drivers/staging/fbtft/fb_hx8347h.c
@@ -0,0 +1,233 @@
+/*
+ * FB driver for the HX8347H LCD Controller
+ *
+ * Copyright (C) 2013 Christian Vogelgsang,
+ *
+ * Based on driver code found here: https://github.com/watterott/r61505u-Adapter
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+
+#include "fbtft.h"
+
+#define DRVNAME		"fb_hx8347h"
+#define WIDTH		240
+#define HEIGHT		320
+#define DEFAULT_GAMMA	"00 0C 0C 36 38 3F 0E 6F 07 0E 11 13 19 0F\n" \
+						"00 07 09 33 33 3F 10 71 06 0C 0E 11 18 F0"
+
+
+static int init_display(struct fbtft_par *par)
+{
+	fbtft_par_dbg(DEBUG_INIT_DISPLAY, par, "%s()\n", __func__);
+
+	par->fbtftops.reset(par);
+
+	write_reg(par, 0xEA, 0x00); //PTBA[15:8]
+	write_reg(par, 0xEB, 0x20); //PTBA[7:0]
+	write_reg(par, 0xEC, 0x3C); //STBA[15:8]
+	write_reg(par, 0xED, 0xC4); //STBA[7:0]
+	write_reg(par, 0xE8, 0x48); //OPON[7:0]
+	write_reg(par, 0xE9, 0x38); //OPON1[7:0]
+	write_reg(par, 0xF1, 0x01); //OTPS1B
+	write_reg(par, 0xF2, 0x08); //GEN
+	//Power Voltage Setting
+	write_reg(par, 0x1B, 0x36); //VRH=4.65V 1b
+	write_reg(par, 0x1A, 0x01); //BT (VGH~15V,VGL~-10V,DDVDH~5V)
+	write_reg(par, 0x24, 0x80); //VMH(VCOM High voltage ~4.2V) 80
+	write_reg(par, 0x25, 0x58); //VML(VCOM Low voltage -1.2V)58
+	//****VCOM offset**///
+	write_reg(par, 0x23, 0x5A); //for Flicker adjust //can reload from 5A
+	//Power on Setting
+	write_reg(par, 0x18, 0xff); //I/P_RADJ,N/P_RADJ, Normal mode 70Hz //36
+	write_reg(par, 0x19, 0x01); //OSC_EN='1', start Osc
+	write_reg(par, 0x01, 0x00); //DP_STB='0', out deep sleep
+	// Power Control 6 Register
+	write_reg(par, 0x1F, 0x88);// GAS=1, VOMG=00, PON=0, DK=1, XDK=0, DVDH_TRI=0, STB=0
+	udelay(500);
+	write_reg(par, 0x1F, 0x80);// GAS=1, VOMG=00, PON=0, DK=0, XDK=0, DVDH_TRI=0, STB=0
+	udelay(500);
+	write_reg(par, 0x1F, 0x90);// GAS=1, VOMG=00, PON=1, DK=0, XDK=0, DVDH_TRI=0, STB=0
+	udelay(500);
+	write_reg(par, 0x1F, 0xD0);// GAS=1, VOMG=10, PON=1, DK=0, XDK=0, DDVDH_TRI=0, STB=0
+	udelay(500);
+	// 262k/65k color selection
+	write_reg(par, 0x17, 0x05); // 0x05 65k color
+	// Panel Characteristic Control Register
+	write_reg(par, 0x36, 0x02); // 0x02 Normally Black Panel
+	//Display ON Setting
+	write_reg(par, 0x28, 0x38); // GON=1, DTE=1, D=1000
+	mdelay(4);
+	write_reg(par, 0x28, 0x3F); // GON=1, DTE=1, D=1100
+
+	// Frame Control Registers
+	write_reg(par, 0x29, 0x06);
+	write_reg(par, 0x2a, 0x0A);
+	write_reg(par, 0x2B, 0x08);
+	write_reg(par, 0x2C, 0x08);
+
+	return 0;
+}
+
+static void set_addr_win(struct fbtft_par *par, int xs, int ys, int xe, int ye)
+{
+	fbtft_par_dbg(DEBUG_SET_ADDR_WIN, par, "%s(): xs=%d, ys=%d, xe=%d, ye=%d, width=%d, height=%d, rotate=%d\n", __func__, xs, ys, xe, ye, WIDTH, HEIGHT, par->info->var.rotate);
+
+	switch (par->info->var.rotate) {
+	/* R20h = Horizontal GRAM Start Address */
+	/* R21h = Vertical GRAM Start Address */
+	case 0:
+		write_reg(par, 0x02, (xs >> 8) & 0xFF); // Horizontal Start Address Upper Byte
+		write_reg(par, 0x03, xs & 0xFF); // Horizontal Start Address Lower Byte
+		write_reg(par, 0x04, (xe >> 8) & 0xFF); //Horizontal End Address Upper Byte
+		write_reg(par, 0x05, xe & 0xFF); // Horizontal End Address Lower Byte
+		write_reg(par, 0x06, (ys >> 8) & 0xFF); // Vertical Start Address Upper Byte
+		write_reg(par, 0x07, ys & 0xFF); // Vertical Start Address Lower Byte
+		write_reg(par, 0x08, (ye >> 8) & 0xFF); // Vertical End Address Upper Byte
+		write_reg(par, 0x09, ye & 0xFF); // Vertical End Address Lower Byte
+		break;
+	case 180:
+		write_reg(par, 0x02, ((WIDTH - 1 - xs) >> 8) & 0xFF); // Horizontal Start Address Upper Byte
+		write_reg(par, 0x03, (WIDTH - 1 - xs) & 0xFF); // Horizontal Start Address Lower Byte
+		write_reg(par, 0x04, 0x00); //Horizontal End Address Upper Byte
+		write_reg(par, 0x05, 0x00); // Horizontal End Address Lower Byte
+		write_reg(par, 0x06, ((HEIGHT - 1 - ys) >> 8) & 0xFF); // Vertical Start Address Upper Byte
+		write_reg(par, 0x07, (HEIGHT - 1 - ys) & 0xFF); // Vertical Start Address Lower Byte
+		write_reg(par, 0x08, 0x00); // Vertical End Address Upper Byte
+		write_reg(par, 0x09, 0x00); // Vertical End Address Lower Byte
+		break;
+	case 270:
+		write_reg(par, 0x02, ((HEIGHT - 1 - ys) >> 8) & 0xFF); // Horizontal Start Address Upper Byte
+		write_reg(par, 0x03, (HEIGHT - 1 - ys) & 0xFF); // Horizontal Start Address Lower Byte
+		write_reg(par, 0x04, 0x00); //Horizontal End Address Upper Byte
+		write_reg(par, 0x05, 0x00); // Horizontal End Address Lower Byte
+		write_reg(par, 0x06, (xs >> 8) & 0xFF); // Vertical Start Address Upper Byte
+		write_reg(par, 0x07, xs & 0xFF); // Vertical Start Address Lower Byte
+		write_reg(par, 0x08, (xe >> 8) & 0xFF); // Vertical End Address Upper Byte
+		write_reg(par, 0x09, xe & 0xFF); // Vertical End Address Lower Byte
+		break;
+	case 90:
+		write_reg(par, 0x02, (ys >> 8) & 0xFF); // Horizontal Start Address Upper Byte
+		write_reg(par, 0x03, ys & 0xFF); // Horizontal Start Address Lower Byte
+		write_reg(par, 0x04, (ye >> 8) & 0xFF); //Horizontal End Address Upper Byte
+		write_reg(par, 0x05, ye & 0xFF); // Horizontal End Address Lower Byte
+		write_reg(par, 0x06, ((WIDTH - 1 - xs) >> 8) & 0xFF); // Vertical Start Address Upper Byte
+		write_reg(par, 0x07, (WIDTH - 1 - xs) & 0xFF); // Vertical Start Address Lower Byte
+		write_reg(par, 0x08, 0x00); // Vertical End Address Upper Byte
+		write_reg(par, 0x09, 0x00); // Vertical End Address Lower Byte
+		break;
+	}
+	write_reg(par, 0x0022); /* Write Data to GRAM */
+}
+
+static int set_var(struct fbtft_par *par)
+{
+	switch (par->info->var.rotate) {
+	case 0:
+		write_reg(par, 0x16, (par->bgr << 3) | 0x00);
+		break;
+	case 270:
+		write_reg(par, 0x16, (par->bgr << 3) | 0xA0);
+		break;
+	case 180:
+		write_reg(par, 0x16, (par->bgr << 3) | 0xC0);
+		break;
+	case 90:
+		write_reg(par, 0x16, (par->bgr << 3) | 0x60);
+		break;
+	}
+	return 0;
+}
+
+/*
+ * Gamma string format:
+ *   VRP0 VRP1 VRP2 VRP3 VRP4 VRP5 PRP0 PRP1 PKP0 PKP1 PKP2 PKP3 PKP4 CGM
+ *   VRN0 VRN1 VRN2 VRN3 VRN4 VRN5 PRN0 PRN1 PKN0 PKN1 PKN2 PKN3 PKN4 CGM
+ */
+#define CURVE(num, idx)  curves[num * par->gamma.num_values + idx]
+static int set_gamma(struct fbtft_par *par, u32 *curves)
+{
+	unsigned long mask[] = {
+		0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0x1f, 0x1f,
+		0x1f, 0x1f, 0x1f, 0x0f,
+	};
+	int i, j;
+	int acc = 0;
+
+	/* apply mask */
+	for (i = 0; i < par->gamma.num_curves; i++)
+	{
+		for (j = 0; j < par->gamma.num_values; j++) {
+			acc += CURVE(i, j);
+			CURVE(i, j) &= mask[j];
+		}
+	}
+	
+	if (acc == 0) /* skip if all values are zero */
+		return 0;
+
+	for (i = 0; i < par->gamma.num_curves; i++) {
+		write_reg(par, 0x40 + (i * 0x10), CURVE(i, 0));
+		write_reg(par, 0x41 + (i * 0x10), CURVE(i, 1));
+		write_reg(par, 0x42 + (i * 0x10), CURVE(i, 2));
+		write_reg(par, 0x43 + (i * 0x10), CURVE(i, 3));
+		write_reg(par, 0x44 + (i * 0x10), CURVE(i, 4));
+		write_reg(par, 0x45 + (i * 0x10), CURVE(i, 5));
+		write_reg(par, 0x46 + (i * 0x10), CURVE(i, 6));
+		write_reg(par, 0x47 + (i * 0x10), CURVE(i, 7));
+		write_reg(par, 0x48 + (i * 0x10), CURVE(i, 8));
+		write_reg(par, 0x49 + (i * 0x10), CURVE(i, 9));
+		write_reg(par, 0x4A + (i * 0x10), CURVE(i, 10));
+		write_reg(par, 0x4B + (i * 0x10), CURVE(i, 11));
+		write_reg(par, 0x4C + (i * 0x10), CURVE(i, 12));
+	}
+	write_reg(par, 0x5D, (CURVE(1, 13) << 4) | CURVE(0, 13));
+
+	return 0;
+}
+
+#undef CURVE
+
+
+static struct fbtft_display display = {
+	.regwidth = 8,
+	.width = WIDTH,
+	.height = HEIGHT,
+	.gamma_num = 2,
+	.gamma_len = 14,
+	.gamma = DEFAULT_GAMMA,
+	.fbtftops = {
+		.init_display = init_display,
+		.set_addr_win = set_addr_win,
+		.set_var = set_var,
+		.set_gamma = set_gamma,
+	},
+};
+
+FBTFT_REGISTER_DRIVER(DRVNAME, "himax,hx8347h", &display);
+
+MODULE_ALIAS("spi:" DRVNAME);
+MODULE_ALIAS("platform:" DRVNAME);
+MODULE_ALIAS("spi:hx8347h");
+MODULE_ALIAS("platform:hx8347h");
+
+MODULE_DESCRIPTION("FB driver for the HX8347H LCD Controller");
+MODULE_AUTHOR("Christian Vogelgsang");
+MODULE_LICENSE("GPL");
diff --git a/drivers/staging/fbtft/fb_r61505w.c b/drivers/staging/fbtft/fb_r61505w.c
new file mode 100644
index 000000000000..f7d3590645d9
--- /dev/null
+++ b/drivers/staging/fbtft/fb_r61505w.c
@@ -0,0 +1,245 @@
+/*
+ * FB driver for the Renesas R61505W LCD Controller
+ *
+ * Copyright (C) 2013 Noralf Tronnes on the ILI9320 driver fb_ili9320
+ * Modified by Steven Hang 2019 to support the R61505W based displays
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/gpio.h>
+#include <linux/spi/spi.h>
+#include <linux/delay.h>
+
+#include "fbtft.h"
+
+#define DRVNAME		"fb_r61505w"
+#define WIDTH		240
+#define HEIGHT		320
+#define DEFAULT_GAMMA	"00 0B 17 0D 07 01 0A 03 0A 00 00 00 00\n" \
+						"0A 03 0A 01 07 0D 17 0B 00 03 03 03 03"
+
+static int init_display(struct fbtft_par *par)
+{
+	fbtft_par_dbg(DEBUG_INIT_DISPLAY, par, "%s()\n", __func__);
+
+	par->fbtftops.reset(par);
+
+	/* Initialization sequence */
+
+	//Read out NVM data and write to internal registers
+    write_reg(par, 0x00A4, 0x0001);   
+    udelay(200);
+
+    // Driver Output Control Register
+    write_reg(par, 0x0060, 0x2700); // 320 Lines
+
+    // Display Control 2 Register
+    write_reg(par, 0x0008, 0x0808); // Front Porch = 8 lines, Back Porch = 8 lines
+    
+    // Panel Interface Control 1   
+    write_reg(par, 0x0090, 0x0017); // 23 Clocks per Line    
+    
+    // Display Control 4   
+    write_reg(par, 0x000A, 0x0008); // FMARKOE = 1 
+    mdelay(20);
+
+    // Power Control 1
+    write_reg(par, 0x0010, 0x0730); //BT=3'h7, AP=2'h3
+    //mdelay(100);
+    // Power Control 2   
+    write_reg(par, 0x0011, 0x0247); //VC=3'h7, DC0=3'h4, DC1=3'h2
+    //mdelay(100);   
+    
+    // VCOM Low Power Control
+    write_reg(par, 0x000E, 0x0020); // Equalize VCOML
+    mdelay(20);
+
+    // Power Control 4
+    write_reg(par, 0x0013, 0x1e00); // VCOM Amplitude = VREG1OUTx1.30
+    mdelay(20);
+
+    // NVM Data Read 3
+    write_reg(par, 0x002A, 0x0056); // VCM2[6:0] = 7'h56
+    // Power Control 3 
+    //write_reg(par, 0x0012, 0x0199); // VCMR=1, PON=1, VREG1OUT=VCIRx1.650
+    //mdelay(50);
+    write_reg(par, 0x0012, 0x01b9); // VCMR=1, PSON = 1, PON=1, VREG1OUT=VCIRx1.650 
+    mdelay(20);
+
+    // Window Horizontal Frame Memory Start Address  
+    write_reg(par, 0x0050, 0x0000); // 0 
+    // Window Horizontal Frame Memory End Address
+    write_reg(par, 0x0051, 0x00EF); // 239
+    // Window Vertical Frame Memory Start Address
+    write_reg(par, 0x0052, 0x0000); // 0 
+    // Window Vertical Frame Memory End Address
+    write_reg(par, 0x0053, 0x013F); // 319
+
+    // Base Image Display Control  
+    write_reg(par, 0x0061, 0x0000); // REV=0 No Grayscale Inversion
+    // Vertical Scroll Control   
+    write_reg(par, 0x006A, 0x0000);
+    // Partial Image Display Position 
+    write_reg(par, 0x0080, 0x0000);
+    // Partial Image Frame Memory Start Line Address
+    write_reg(par, 0x0081, 0x0000); 
+    // Partial Image Frame Memory End Line Address
+    write_reg(par, 0x0082, 0x0000);
+
+    // Panel Interface Control 2  
+    write_reg(par, 0x0092, 0x0300); // NOWI[2:0]=3'h3 Non-overlap period of adjacent gate outputs = 3 clocks
+    // Panel Interface Control 3
+    write_reg(par, 0x0093, 0x0005); // MCPI[2:0]=3'h5 Source output timing @ 5 clocks position
+    // Panel Interface Control 4
+    write_reg(par, 0x0094, 0x0003); // SDTI[2:0]=3'h3 Source output alternating @ 3 clock position 
+
+    // Driver Output Control
+    write_reg(par, 0x0001, 0x0100); // SS=1
+    mdelay(20);
+
+    // LCD Driving Wave Control
+    write_reg(par, 0x0002, 0x0200); // BC0=1 Line inversion waveform is selected
+    mdelay(20);
+
+    // Entry Mode
+    write_reg(par, 0x0003, 0x0030 | (par->bgr << 12));
+    mdelay(20); 
+   
+	// External Display Interface Control 1
+    write_reg(par, 0x000C, 0x0000);   //External Display Interface Control 1 (R0Ch)0x0000  changed by phl 070103   
+    // External Display Interface Control 2
+    write_reg(par, 0x000F, 0x0000); //External Display Interface Control 2 (R0Fh)   
+    
+    // Frame Memory Horizontal Address Set
+    write_reg(par, 0x0020, 0x0000); //RAM Address Set (Horizontal Address) (R20h)   
+    // Frame Memory Vertical Address Set
+    write_reg(par, 0x0021, 0x0000); //RAM Address Set (Vertical Address) (R21h)   
+    
+    // Display Control 1     
+    write_reg(par, 0X0007, 0X0100); // BASEE = 1
+
+	return 0;
+}
+
+static void set_addr_win(struct fbtft_par *par, int xs, int ys, int xe, int ye)
+{
+	fbtft_par_dbg(DEBUG_SET_ADDR_WIN, par, "%s(): xs=%d, ys=%d, xe=%d, ye=%d, width=%d, height=%d, rotate=%d\n", __func__, xs, ys, xe, ye, WIDTH, HEIGHT, par->info->var.rotate);
+
+	switch (par->info->var.rotate) {
+	/* R20h = Horizontal GRAM Start Address */
+	/* R21h = Vertical GRAM Start Address */
+	case 0:
+		write_reg(par, 0x0020, xs);
+		write_reg(par, 0x0021, ys);
+		break;
+	case 180:
+		write_reg(par, 0x0020, WIDTH - 1 - xs);
+		write_reg(par, 0x0021, HEIGHT - 1 - ys);
+		break;
+	case 270:
+		write_reg(par, 0x0020, WIDTH - 1 - ys);
+		write_reg(par, 0x0021, xs);
+		break;
+	case 90:
+		write_reg(par, 0x0020, ys);
+		write_reg(par, 0x0021, HEIGHT - 1 - xs);
+		break;
+	}
+	write_reg(par, 0x0022); /* Write Data to GRAM */
+}
+
+static int set_var(struct fbtft_par *par)
+{
+	switch (par->info->var.rotate) {
+	case 0:
+		write_reg(par, 0x0003, (par->bgr << 12) | 0x30);
+		break;
+	case 270:
+		write_reg(par, 0x0003, (par->bgr << 12) | 0x28);
+		break;
+	case 180:
+		write_reg(par, 0x0003, (par->bgr << 12) | 0x00);
+		break;
+	case 90:
+		write_reg(par, 0x0003, (par->bgr << 12) | 0x18);
+		break;
+	}
+	return 0;
+}
+
+/*
+ * Gamma string format:
+ *  PR0P0 PR0P1 PR0P2 PR0P3 PR0P4 PR0P5 PR0P6 PR0P7 PR0P8 PI0P0 PI0P1 PI0P2 PI0P3
+ *  PR0N0 PR0N1 PR0N2 PR0N3 PR0N4 PR0N5 PR0N6 PR0N7 PR0N8 PI0N0 PI0N1 PI0N2 PI0N3
+ */
+#define CURVE(num, idx)  curves[num * par->gamma.num_values + idx]
+static int set_gamma(struct fbtft_par *par, u32 *curves)
+{
+	unsigned long mask[] = {
+		0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x03, 0x03, 0x03, 0x03,
+		0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x03, 0x03, 0x03, 0x03,
+	};
+
+	int i, j;
+	/* apply mask */
+	for (i = 0; i < 2; i++)
+	{
+		for (j = 0; j < 13; j++)
+		{
+			CURVE(i, j) &= mask[i * par->gamma.num_values + j];
+		}
+	}
+
+	write_reg(par, 0x0030, (CURVE(0, 1) << 8) | CURVE(0, 0));
+	write_reg(par, 0x0031, (CURVE(0, 4) << 12) | (CURVE(0, 3) << 8) | CURVE(0, 2));
+	write_reg(par, 0x0032, (CURVE(0, 6) << 8) | CURVE(0, 5));
+	write_reg(par, 0x0033, (CURVE(0, 8) << 8) | CURVE(0, 7));
+	write_reg(par, 0x0034, (CURVE(0,12) << 12) | (CURVE(0, 11) << 8) | (CURVE(0, 10) << 4) | CURVE(0, 9));
+
+	write_reg(par, 0x0035, (CURVE(1, 1) << 8) | CURVE(1, 0));
+	write_reg(par, 0x0036, (CURVE(1, 4) << 12) | (CURVE(1, 3) << 8) | CURVE(1, 2));
+	write_reg(par, 0x0037, (CURVE(1, 6) << 8) | CURVE(1, 5));
+	write_reg(par, 0x0038, (CURVE(1, 8) << 8) | CURVE(1, 7));
+	write_reg(par, 0x0039, (CURVE(1,12) << 12) | (CURVE(1, 11) << 8) | (CURVE(1, 10) << 4) | CURVE(1, 9));
+
+	return 0;
+}
+#undef CURVE
+
+static struct fbtft_display display = {
+	.regwidth = 16,
+	.width = WIDTH,
+	.height = HEIGHT,
+	.gamma_num = 2,
+	.gamma_len = 13,
+	.gamma = DEFAULT_GAMMA,
+	.fbtftops = {
+		.init_display = init_display,
+		.set_addr_win = set_addr_win,
+		.set_var = set_var,
+		.set_gamma = set_gamma,
+	},
+};
+
+FBTFT_REGISTER_DRIVER(DRVNAME, "renesas,r61505w", &display);
+
+MODULE_ALIAS("spi:" DRVNAME);
+MODULE_ALIAS("platform:" DRVNAME);
+MODULE_ALIAS("spi:r61505w");
+MODULE_ALIAS("platform:r61505w");
+
+MODULE_DESCRIPTION("FB driver for the R61505W LCD Controller");
+MODULE_AUTHOR("Steven Hang");
+MODULE_LICENSE("GPL");
diff --git a/drivers/staging/fbtft/fbtft_device.c b/drivers/staging/fbtft/fbtft_device.c
index 50e97da993e7..14ef86e12da3 100644
--- a/drivers/staging/fbtft/fbtft_device.c
+++ b/drivers/staging/fbtft/fbtft_device.c
@@ -577,6 +577,24 @@ static struct fbtft_device_display displays[] = {
 				},
 			}
 		}
+	}, {
+		.name = "hx8347h",
+		.spi = &(struct spi_board_info) {
+			.modalias = "fb_hx8347h",
+			.max_speed_hz = 50000000,
+			.mode = SPI_MODE_0,
+			.platform_data = &(struct fbtft_platform_data) {
+				.display = {
+					.buswidth = 8,
+					.backlight = 1,
+				},
+				.startbyte = 0x70,
+				.bgr = true,
+				.gpios = (const struct fbtft_gpio []) {
+					{},
+				},
+			}
+		}
 	}, {
 		.name = "hx8353d",
 		.spi = &(struct spi_board_info) {
@@ -639,6 +657,24 @@ static struct fbtft_device_display displays[] = {
 				.gamma = HY28B_GAMMA,
 			}
 		}
+	}, {
+		.name = "ili9320",
+		.spi = &(struct spi_board_info) {
+			.modalias = "fb_ili9320",
+			.max_speed_hz = 32000000,
+			.mode = SPI_MODE_3,
+			.platform_data = &(struct fbtft_platform_data) {
+				.display = {
+					.buswidth = 8,
+					.backlight = 1,
+				},
+				.startbyte = 0x70,
+				.bgr = true,
+				.gpios = (const struct fbtft_gpio []) {
+					{},
+				},
+			}
+		}
 	}, {
 		.name = "ili9481",
 		.spi = &(struct spi_board_info) {
@@ -916,6 +952,24 @@ static struct fbtft_device_display displays[] = {
 				},
 			}
 		}
+	}, {
+		.name = "r61505w",
+		.spi = &(struct spi_board_info) {
+			.modalias = "fb_r61505w",
+			.max_speed_hz = 48000000,
+			.mode = SPI_MODE_3,
+			.platform_data = &(struct fbtft_platform_data) {
+				.display = {
+					.buswidth = 8,
+					.backlight = 1,
+				},
+				.startbyte = 0x70,
+				.bgr = true,
+				.gpios = (const struct fbtft_gpio []) {
+					{},
+				},
+			}
+		}
 	}, {
 		.name = "s6d02a1",
 		.spi = &(struct spi_board_info) {
